from PIL import Image, ImageDraw # Нужна для работы с картинкой
from random import randint # Нужна для выбора случайного числа

def Encrypt_in_Image():
    keys = [] # Здесь будут записаны координаты пикселей в которых шифровали текст
    img = Image.open(input('В какую картинку изволите шифровать? -> ')) # Вводим картинку
    draw = ImageDraw.Draw(img) # Создаём обьект для рисования
    width = img.size[0] # Ширина
    height = img.size[1] # Высота
    pix = img.load() # Загружаем "пиксельные данные"
    f = open('keys.txt', 'w') # Создаём текстовый файл где будут ключи

    for elem in ([ord(elem) for elem in input('Что за секрет? -> ')]): # Этим циклом мы кодируем каждый символ
        key = (randint(1, width), randint(1, height)) # Сначала наугад ткнем пальцем на пиксель картинки
        g, b = pix[key][1:3] # Узнаем его зелёный и синий параметр 
        draw.point(key, (elem, g, b)) # Заменим его красный элемент на ord(elem)
        f.write(str(key)+'\n') # Напишем координаты пикселя который только что использовали

    img.save('Secret.png', 'PNG') # Сохраним
    f.close() # Закроем


Encrypt_in_Image() # Запустим

'''
Минусы программы:

1. Так как мы тычем пальцем в небо выбирая пиксель для шифрования
есть крошечный шанс что мы дважды выберем один пиксель
наверное за миллион использований этой программы такого не произойдёт
но за миллиард точно случится, и это испортит секретную информацию. 

2. Использовать можно только английский алфавит(потому что мы как бы заменяем 
red параметр пикселя на порядковый номер символа в кодировке символов(короче 
нам нужен алфавит в пределе первых 255 символов кодировки, а это как раз английский(русский
вообще с 1000 начинается))).

3. Стоит доработать .save() кусок в первой программе
что бы можно было прямо вводить то какой файл надо.

Плюсы программы:

1. Прикольно

2. Без ключей картинку не расшифровать так что безопасность на высоте,
даже если злодей перехватит картинку ему нужны ключи, иначе расшифровка займёт вечность
(если у него нет квантового компьютера конечно).
'''

